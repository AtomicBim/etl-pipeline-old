import os
import subprocess
import sys
import pathlib
import asyncio
import nbformat
from nbconvert.preprocessors import ExecutePreprocessor
from config.logging_config import setup_logging
from typing import List, Tuple

# Fix for Windows Proactor event loop warning with ZMQ
if sys.platform.startswith('win'):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

BASE_DIR = pathlib.Path(__file__).resolve().parent
os.environ['ETL_ROOT'] = str(BASE_DIR)

logger = setup_logging(__name__)

def run_py_scripts(scripts_folder: str) -> Tuple[List[str], List[Tuple[str, str]]]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Å–∫—Ä–∏–ø—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
    
    Returns:
        Tuple[List[str], List[Tuple[str, str]]]: (—É—Å–ø–µ—à–Ω—ã–µ –º–æ–¥—É–ª–∏, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏)
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ {scripts_folder}")
    successful = []
    failed = []
    
    scripts = sorted((BASE_DIR / scripts_folder).glob('*.py'))
    if not scripts:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ {scripts_folder}")
        return successful, failed
    
    for script in scripts:
        try:
            logger.info(f'–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {script.name}')
            result = subprocess.run([sys.executable, str(script)], 
                                  check=True, 
                                  capture_output=False,  # –ü–æ–∑–≤–æ–ª—è–µ–º –≤—ã–≤–æ–¥—É –∏–¥—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
                                  text=True,
                                  timeout=1200)  # 20 –º–∏–Ω—É—Ç timeout
            successful.append(script.name)
            logger.info(f'‚úì {script.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
                
        except subprocess.CalledProcessError as e:
            error_msg = f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}"
            failed.append((script.name, error_msg))
            logger.error(f'‚úó –û—à–∏–±–∫–∞ –≤ {script.name}: {error_msg}')
            
        except subprocess.TimeoutExpired as e:
            error_msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω timeout ({e.timeout}s)"
            failed.append((script.name, error_msg))
            logger.error(f'‚úó Timeout –≤ {script.name}: {error_msg}')
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            failed.append((script.name, error_msg))
            logger.error(f'‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {script.name}: {error_msg}')
    
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ {scripts_folder}. "
                f"–£—Å–ø–µ—à–Ω–æ: {len(successful)}, –° –æ—à–∏–±–∫–∞–º–∏: {len(failed)}")
    return successful, failed

def run_notebooks_in_order(notebook_names: List[str]) -> Tuple[List[str], List[Tuple[str, str]]]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Jupyter notebooks –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    
    Returns:
        Tuple[List[str], List[Tuple[str, str]]]: (—É—Å–ø–µ—à–Ω—ã–µ notebooks, –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ notebooks —Å –æ—à–∏–±–∫–∞–º–∏)
    """
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
    successful = []
    failed = []
    datasets_dir = BASE_DIR / 'datasets'
    
    if not datasets_dir.exists():
        logger.warning(f"–ü–∞–ø–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {datasets_dir}")
        return successful, failed
    
    for name in notebook_names:
        nb_file = datasets_dir / f'create_{name}_dataset.ipynb'
        if not nb_file.exists():
            error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {nb_file}"
            failed.append((f'create_{name}_dataset.ipynb', error_msg))
            logger.warning(f'‚úó {error_msg}')
            continue
            
        try:
            logger.info(f'–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {nb_file.name}')
            with open(nb_file, encoding='utf-8') as f:
                nb = nbformat.read(f, as_version=4)
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ExecutePreprocessor –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
                ep = ExecutePreprocessor(
                    timeout=1200, 
                    kernel_name='python3',
                    allow_errors=False,
                    store_widget_state=False,
                    log_output=True  # –í–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
                )
                ep.preprocess(nb, {'metadata': {'path': str(nb_file.parent)}})
            
            successful.append(nb_file.name)
            logger.info(f'‚úì {nb_file.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
            
        except nbformat.ValidationError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ notebook: {str(e)}"
            failed.append((nb_file.name, error_msg))
            logger.error(f'‚úó –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ {nb_file.name}: {error_msg}')
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            failed.append((nb_file.name, error_msg))
            logger.error(f'‚úó –û—à–∏–±–∫–∞ –≤ {nb_file.name}: {error_msg}')
    
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ notebooks. "
                f"–£—Å–ø–µ—à–Ω–æ: {len(successful)}, –° –æ—à–∏–±–∫–∞–º–∏: {len(failed)}")
    return successful, failed

def print_final_report(py_success: List[str], py_failed: List[Tuple[str, str]], 
                      nb_success: List[str], nb_failed: List[Tuple[str, str]]):
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ETL pipeline"""
    total_success = len(py_success) + len(nb_success)
    total_failed = len(py_failed) + len(nb_failed)
    total_modules = total_success + total_failed
    
    logger.info("=" * 60)
    logger.info("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ETL PIPELINE")
    logger.info("=" * 60)
    logger.info(f"–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {total_modules}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_success}")
    logger.info(f"–° –æ—à–∏–±–∫–∞–º–∏: {total_failed}")
    
    if py_success:
        logger.info(f"\n‚úì –£—Å–ø–µ—à–Ω—ã–µ Python —Å–∫—Ä–∏–ø—Ç—ã ({len(py_success)}):")
        for script in py_success:
            logger.info(f"  - {script}")
    
    if nb_success:
        logger.info(f"\n‚úì –£—Å–ø–µ—à–Ω—ã–µ Jupyter notebooks ({len(nb_success)}):")
        for notebook in nb_success:
            logger.info(f"  - {notebook}")
    
    if py_failed or nb_failed:
        logger.warning(f"\n‚úó –ú–æ–¥—É–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏ ({total_failed}):")
        for name, error in py_failed + nb_failed:
            logger.warning(f"  - {name}: {error}")
    
    if total_failed == 0:
        logger.info("\nüéâ –í—Å–µ –º–æ–¥—É–ª–∏ ETL pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        success_rate = round((total_success / total_modules) * 100, 1) if total_modules > 0 else 0
        logger.warning(f"\n‚ö†Ô∏è  Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%")
    
    logger.info("=" * 60)

if __name__ == "__main__":
    logger.info("ETL pipeline –∑–∞–ø—É—â–µ–Ω")
    
    try:
        # –ó–∞–ø—É—Å–∫ Python —Å–∫—Ä–∏–ø—Ç–æ–≤
        py_success, py_failed = run_py_scripts('extractors')
        
        # –ó–∞–ø—É—Å–∫ Jupyter notebooks
        nb_success, nb_failed = run_notebooks_in_order(['scripts', 'gitlab', 'projectsync', 'yougile', 'logs'])
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print_final_report(py_success, py_failed, nb_success, nb_failed)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        total_failed = len(py_failed) + len(nb_failed)
        if total_failed == 0:
            logger.info('ETL pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        else:
            logger.warning(f'ETL pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —Å {total_failed} –æ—à–∏–±–∫–∞–º–∏')
            
    except KeyboardInterrupt:
        logger.warning("ETL pipeline –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ETL pipeline: {e}")
        sys.exit(1)